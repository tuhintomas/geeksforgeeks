Given street of houses (a row of houses), each house having some amount of money kept inside;
now there is a thief who is going to steal this money but he has a constraint/rule that he cannot
steal/rob two adjacent houses. Find the maximum money he can rob.

Input:
The first line of input contains an integer T denoting the number of test cases.
The first line of each test case is N and money.

Output:
Print maximum money he can rob.

Constraints:
1 ≤ T ≤ 100
1 ≤ money ≤ 100
1 ≤ N ≤ 1000

Example:
Input:
2
5 10
2 12

Output:
30
12




def maxRobbery(n,m0ney):
    if n%2==0:
        return (n//2)*money
    else:
        return ((n//2)+1)*money
t=int(input())
for i in range(t):
    [n,money]=[int(x) for x in input().split()]
    print(maxRobbery(n,money))
        
