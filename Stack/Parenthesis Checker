Given an expression string exp. Examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp.
For example, the program should print 'balanced' for exp = “[()]{}{[()()]()}” and 'not balanced' for exp = “[(])”

Input:
The first line of input contains an integer T denoting the number of test cases.  Each test case consists of a string of expression,
in a separate line.

Output:
Print 'balanced' without quotes if the pair of parenthesis is balanced else print 'not balanced' in a separate line.

Constraints:
1 ≤ T ≤ 100
1 ≤ |s| ≤ 105

Example:
Input:
3
{([])}
()
([]

Output:
balanced
balanced
not balanced





def parenthesis_checker(exp):
    stack=[]
    dict={')':'(','}':'{',']':'['}
    for i in range(len(exp)):
        if exp[i] in dict and len(stack)==0:
            return "not balanced"
        elif exp[i] in dict and dict[exp[i]]!=stack[-1]:
            return "not balanced"
            
        elif exp[i] in dict and dict[exp[i]]==stack[-1]:
            stack.pop()
        else:
            stack.append(exp[i])
    if len(stack)==0:
        return "balanced"
    else:
        return 'not balanced'
t=int(input())
for i in range(t):
    s=input()
    print(parenthesis_checker(s))
            
